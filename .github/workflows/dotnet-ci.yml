# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: "ArchiWorkshop CI"

on:
  push:
    branches: [ "main" ]
    paths: [ 'Projects/ArchiWorkshop/Src/**', 'Projects/ArchiWorkshop/Tests/**', '.github/workflows/dotnet-ci.yml' ]
    # paths-ignore:
    #     - '**.md'
    #     - '**.pptx'
    #     - '**.png'

jobs:
  build:
    name: Build

    strategy:
        matrix:
            # os: [ ubuntu-22.04 ]
            dotnet-version: [ '8.0.x' ]
            configuration: [ Release ]

    runs-on: ubuntu-22.04

    env:
        solution_dir: ./Projects/ArchiWorkshop
        solution_path: ./Projects/ArchiWorkshop/ArchiWorkshop.sln

    steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Setup .NET SDK ${{ matrix.dotnet-version }}
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: ${{ matrix.dotnet-version }}

        - name: Restore NuGet Packages
          run: |
            dotnet restore ${{ env.solution_path }}

        - name: Build
          run: |
            dotnet build ${{ env.solution_path }} \
                --configuration ${{ matrix.configuration }} \
                --no-restore

        #  /home/runner/work/ArchiWorkshop
        #    /ArchiWorkshop                                             : 저장소 Root
        #      /Projects
        #        /ArchiWorkshop                                         : 솔루션 Root
        #          /TestResults                                         : 테스트 자동화 결과
        #               /19f5be57-f7f1-4902-a22d-ca2dcd8fdc7a           : 코드 커버리지 N개
        #                   /coverage.cobertura.xml
        #               /CodeCoverageReport.Cobertura.xml               : Merged 코드 커버리지
        - name: Test
          run: |
            dotnet test ${{ env.solution_path }} \
                --configuration ${{ matrix.configuration }} \
                --results-directory ${{ env.solution_dir }}/TestResults \
                --no-build \
                --collect:"XPlat Code Coverage" \
                --verbosity normal

        - name: Install dotnet-coverage
          run: dotnet tool install -g dotnet-coverage

        - name: Convert .coverage report to cobertura
          run: |
            dotnet-coverage merge ${{ env.solution_dir }}/TestResults/**/*.coverage \
                -f cobertura \
                -o ${{ env.solution_dir }}/TestResults/CodeCoverageReport.Cobertura.xml

        - name: ReportGenerator
          uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
          with:
            reports: '${{ env.solution_dir }}/TestResults/CodeCoverageReport.Cobertura.xml'
            targetdir: '${{ env.solution_dir }}/TestResults/CodeCoverageReport'
            reporttypes: 'MarkdownSummaryGithub'

        - name: Upload coverage into summary
          run: cat ${{ env.solution_dir }}/TestResults/CodeCoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

        - name: Archive code coverage results
          uses: actions/upload-artifact@v3
          with:
            name: CodeCoverageReport
            path: ${{ env.solution_dir }}/TestResults/**/*.coverage

        - name: ls
          run: |
            pwd
            cd ${{ env.solution_dir }}/TestResults
            ls -al

        #   - name: Test
        #     run: dotnet test --collect "Code Coverage" --no-build --verbosity normal
        #   - name: Install dotnet-coverage
        #     run: dotnet tool install -g dotnet-coverage
        #   - name: Convert .coverage report to cobertura
        #     run: dotnet-coverage merge $GITHUB_WORKSPACE/samples/Calculator/tests/Calculator.Core.Tests/TestResults/**/*.coverage -f cobertura -o $GITHUB_WORKSPACE/report.cobertura.xml
        #   - name: ReportGenerator
        #     uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        #     with:
        #       reports: '${{ github.workspace }}/report.cobertura.xml'
        #       targetdir: '${{ github.workspace }}/coveragereport'
        #       reporttypes: 'MarkdownSummaryGithub'
        #   - name: Upload coverage into summary
        #     run: cat $GITHUB_WORKSPACE/coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
        #   - name: Archive code coverage results
        #     uses: actions/upload-artifact@v3
        #     with:
        #       name: code-coverage-report
        #       path: ./**/TestResults/**/*.coverage

        # 참고 자료
        # https://github.com/microsoft/codecoverage/tree/main/samples/Calculator

        # - name: ls
        #   run: |
        #     echo "hello"
        #     pwd
        #     ls -al
        #     cd ${{ env.solution_dir }}
        #     pwd
        #     ls -al

    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: 8.0.x
    # - name: Restore dependencies
    #   run: dotnet restore
    # - name: Build
    #   run: dotnet build --no-restore
    # - name: Test
    #   run: dotnet test --collect "Code Coverage;Format=cobertura" --no-build --verbosity normal
    # - name: ReportGenerator
    #   uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
    #   with:
    #     reports: './**/TestResults/**/*.cobertura.xml'
    #     targetdir: '${{ github.workspace }}/coveragereport'
    #     reporttypes: 'MarkdownSummaryGithub'
    # - name: Upload coverage into summary
    #   run: cat $GITHUB_WORKSPACE/coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
    # - name: Archive code coverage results
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: code-coverage-report
    #     path: ./**/TestResults/**/*.cobertura.xml